name: Release

on:
  workflow_dispatch:
    inputs:
      platform-dir:
        description: "The platform for which a new version should be released"
        required: true
      version:
        description: "The new version for the platform"
        required: true
      release-message:
        description: "The message of the Release"
        required: true

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Update version in files
        id: update-files
        run: ./scripts/update-version.mjs ${{ github.event.inputs.platform-dir }} ${{ github.event.inputs.version }}
      - name: Generate Tag name
        id: tag-name
        run: echo ::set-output name=tag::${{ github.event.inputs.platform-dir }}-${{ github.event.inputs.version }}
      - name: Generate Archive name
        id: archive-name
        run: echo ::set-output name=filename::CorsairLightingProtocolBoards-${{ steps.tag-name.outputs.tag }}.zip
      - name: Push updated files
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
          git add .
          git commit -m "updated version of ${{ github.event.inputs.platform-dir }} to ${{ github.event.inputs.version }}"
          git push
      - name: Create archive
        run: |
          mv ${{ github.event.inputs.platform-dir }} CorsairLightingProtocolBoards-${{ steps.tag-name.outputs.tag }}
          zip -r "${{ steps.archive-name.outputs.filename }}" CorsairLightingProtocolBoards-${{ steps.tag-name.outputs.tag }}
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag-name.outputs.tag }}
          commit: ${{ github.ref }}
          artifacts: ${{ steps.archive-name.outputs.filename }}
          artifactContentType: application/zip
          body: ${{ github.event.inputs.release-message }}
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Calculate hash and size
        id: metadata
        run: |
          echo ::set-output name=hash::SHA-256:$(sha256sum ${{ steps.archive-name.outputs.filename }} | cut -f1 -d ' ')
          echo ::set-output name=size::$(stat -c%s ${{ steps.archive-name.outputs.filename }})
      - name: Print package metadata
        uses: actions/github-script@v5.1.0
        with:
          result-encoding: string
          script: |
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: "${{ steps.tag-name.outputs.tag }}"
            });
            const browserDownloadUrl = release.data.assets.find(asset => asset.name === "${{ steps.archive-name.outputs.filename }}").browser_download_url;
            const metadata = {
              platform: "${{ steps.update-files.outputs.platform }}",
              version: "${{ github.event.inputs.version }}",
              url: browserDownloadUrl,
              archiveFileName: "${{ steps.archive-name.outputs.filename }}",
              checksum: "${{ steps.metadata.outputs.hash }}",
              size: ${{ steps.metadata.outputs.size }},
            };
            console.log(JSON.stringify(metadata));
